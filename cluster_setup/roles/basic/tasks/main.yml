- name: "Adding each host private IP to /etc/hosts"
  when: not dns_resolvable_host
  lineinfile: 
    path: /etc/hosts 
    line: "{{ hostvars[item]['private_ip'] }} {{ hostvars[item]['ansible_host'] }}"
  with_items: "{{ groups['all'] }}"

- name: "Adding PT proxy to /etc/yum.conf"
  when: use_proxy
  lineinfile:
    path: /etc/yum.conf
    line: "proxy={{ yum_proxy }}"

- name: "Adding proxy to /etc/environment"
  when: use_proxy
  blockinfile:
    dest: /etc/environment
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK "
    block: |
      http_proxy=http://pt.wni.co.jp:8080
      https_proxy=http://pt.wni.co.jp:8080
      no_proxy=localhost,127.0.0.1,riak01,riak02,riak03,192.168.56.105,192.168.56.106,192.168.56.107
  
- name: "Installing EPEL"
  yum: 
    pkg: epel-release 
    state: installed

- name: "upgrade all packages"
  yum: 
    pkg: '*'
    state: latest
  
- name: "Installing addtional softwares"
  yum: 
    pkg: "{{ item }}"
    state: installed
  with_items:
    - vim
    - htop
    - system-storage-manager
    - wget
    - yum-utils

- name: "Configuring firewall for riak http"
  firewalld:
    port: 8098/tcp
    permanent: true
    immediate: true
    state: enabled

- name: "Configuring firewall for riak protobuff"
  firewalld:
    port: 8087/tcp
    permanent: true
    immediate: true
    state: enabled

- name: "Configuring firewall for private network interface"
  firewalld:
    zone: trusted
    interface: "{{ private_network_interface }}"
    permanent: "true"
    state: enabled
    immediate: "true"

- name: install the riak rpm from a remote repo
  yum:
    name: https://files.tiot.jp/riak/kv/2.2/2.2.6/rhel/7/riak-2.2.6-1.el7.x86_64.rpm
    state: present

- name: "Copying riak kernel config file"
  copy:
    src: ../files/sysctl.conf
    dest: /etc/sysctl.d/
    owner: root
    group: root
    mode: 0644
  register: copy_result

- name: "Reload kernel immediately if there was a change"
  command: "sysctl --system"
  when: copy_result is changed

- name: "Configuring resources limit"
  blockinfile:
    dest: /etc/security/limits.conf
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK "
    block: |
      * soft nofile 65536
      * hard nofile 200000
  register: task_result

- name: "Reboot immediately if there was a change."
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  when: task_result is changed

- name: "Wait for the reboot to complete if there was a change"
  wait_for_connection:
    connect_timeout: "20"
    sleep: "5"
    delay: "5"
    timeout: "300"
  when: task_result is changed

- name: "Config riak nodename"
  lineinfile:
    path: /etc/riak/riak.conf
    regexp: '{{ item.key }}'
    line: '{{ item.value }}'
  loop:
    - { key: '^nodename = ', value: 'nodename = riak@{{ private_ip }}' }
    - { key: '^listener.http.internal = ', value: 'listener.http.internal = 0.0.0.0:8098'}
    - { key: '^listener.protobuf.internal = ', value: 'listener.protobuf.internal = 0.0.0.0:8087'}
    - { key: '^platform_data_dir = ', value: 'platform_data_dir = /usr/amoeba/riak/db'}
    - { key: '^platform_log_dir = ', value: 'platform_log_dir = /usr/amoeba/riak/log'}
    - { key: '^storage_backend = ', value: 'storage_backend = leveldb'}
    - { key: '^secure_referer_check = ', value: 'secure_referer_check = off'}
    - { key: '^leveldb.expiration = ', value: 'leveldb.expiration = on'}
    - { key: '^leveldb.expiration.retention_time = ', value: 'leveldb.expiration.retention_time = 8d'}
    - { key: '^leveldb.expiration.mode  = ', value: 'leveldb.expiration.mode = whole_file'}
  register: riak_config_result

- name: "Create a riak db directory if it doesn't exist"
  file:
    path: /usr/amoeba/riak/db
    state: directory
    owner: riak
    group: riak
    mode: 0755

- name: "Create a riak logs directory if it doesn't exist"
  file:
    path: /usr/amoeba/riak/log
    state: directory
    owner: riak
    group: riak
    mode: 0755

- name: "Reload riak config immediately if there was a change"
  when: riak_config_result is changed
  command: "chkconfig riak on"

- name: "Starting riak service"
  command: "riak start"

- name: "Waiting for riak service"
  riak:
    wait_for_service: kv
